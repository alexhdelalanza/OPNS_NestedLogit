#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1), val = as.numeric(val)) %>%
# group_by(trial) %>%
filter(val == max(val))
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1), val = as.numeric(val))
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == pmax(val)) %>% head
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%head
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == pmax(as.numeric(val))) %>% head
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(as.numeric(val) == pmax(as.numeric(val))) %>% head
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(as.numeric(val) == as.numeric(pmax(val))) %>% head
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) ->x
head(x)
y = head(x)
y %>% fl(val == max(val))
y %>% filter(val == max(val))
y
y %>% filter(lambda == max(lambda))
y
y %>% ungroup ->y
y
y %>% filter(lambda == max(lambda))
y
class(y)
y = as.data.frame(y)
class(y)
y %>% filter(lambda == max(lambda))
?filter
source('header.R')
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) ->x
val = readRDS(paste0(var_save, 'choice_values.rds'))
lambda = readRDS(paste0(var_save, 'lambda_values.rds'))
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) ->x
S = 10^4
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) ->x
class(x)
x
filter
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>% head
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
ungroup %>%
#make second round choice
left_join(val, by = 'bucket')
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val))
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
ungroup %>%
select(-val) %>%
#make second round choice
left_join(val, by = 'bucket')
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
ungroup %>%
select(-val) %>%
#make second round choice
left_join(val, by = 'bucket') %>%
mutate(value = val+lambda*rgev(n(), xi  =  0, mu  =  0, beta  =  1))
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
ungroup %>%
select(-val) %>%
#make second round choice
left_join(val, by = 'bucket') %>%
mutate(value = val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1))
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
ungroup %>%
select(-val) %>%
#make second round choice
left_join(val, by = 'bucket') %>%
mutate(value = val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
filter(value == max(value)) %>%
select(trial, bucket, choice) %>%
ungroup
left_join(val, lambda, by = 'bucket') %>%
group_by(bucket) %>%
#calc inclusive value
summarise(
lambda = unique(lambda),
inclusive.val = log(sum(exp(val/lambda)))
) %>%
mutate(inclusive.val = lambda * inclusive.val) %>%
merge(data.frame(trial = seq(S))) %>%
#make first round choice
mutate(val = inclusive.val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
select(-val) %>%
#make second round choice
left_join(val, by = 'bucket') %>%
mutate(value = val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1)) %>%
filter(value == max(value)) %>%
select(trial, bucket, choice) %>%
ungroup
left_join(val, lambda, by = 'bucket')
left_join(val, lambda, by = 'bucket') %>%
merge(data.frame(trial = seq(S))) %>%
mutate(
val = val+fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1),
val = as.numeric(val+lambda*fExtremes::rgev(n(), xi  =  0, mu  =  0, beta  =  1))
) %>%
group_by(trial) %>%
filter(val == max(val)) %>%
select(trial, bucket, choice) %>%
ungroup()
data <- list(
val = readRDS(paste0(var_save, 'choice_values.rds')),
lambda = readRDS(paste0(var_save, 'lambda_values.rds'))
)
source('~/Dropbox/teaching/OPNS523/assignments/OPNS_NestedLogit_lab/solution/code/modules/simChoices.R')
sim_fun = sim_sequential_model
sim_fun(data$val, data$lambda)
sim_fun(data$val, data$lambda) ->x
h(x)
dim(x)
sim_data = x
num_boots = 3
seq(num_boots) %>%
dmap(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
}) ->y
seq(num_boots)
seq(num_boots) %>%
dmap(~{browser()
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})
data.frame(samp = ., sample_n(sim_data, nrow(sim_data),
replace = . > 1))
data.frame(samp = ., sample_n(sim_data, nrow(sim_data),
replace = . > 1)) %>% head()
seq(num_boots) %>%
map(~{browser()
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})->y
seq(num_boots) %>%
map(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})->y
y[[1]] %>% dim
y[[2]] %>% dim
h(x)
head(x)
h=head
y[[1]] %>% h
sim_data %>% h
y[[1]] %>% Sm
y[[1]] %>% Summarise
y[[1]] %>% Sumarise
y[[1]] %>% summarise()
y[[1]] %>% head()
y[[1]] %>% summarise()
y[[1]] %>% ungroup %>% summarise()
y[[1]] %>% class
summarise()
summarise
y[[1]] %>% head
y[[2]] %>% head
y[[3]] %>% head
seq(num_boots) %>%
dmap(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})
?dmap
seq(num_boots) %>%
map_df(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
})->y
dim(y)
h(y)
val=data$val
lambda=data$lambda
seq(num_boots) %>%
map_df(~{
data.frame(
samp = .,
sample_n(sim_data, nrow(sim_data), replace = . > 1)
#On first trial, use true data (i.e., sample without replacement)
)
}) ->sim_data
group_by(sim_data, samp, bucket, choice) %>%
summarise(sim.prob=n()) %>%head
group_by(sim_data, samp, bucket, choice) %>%head
count(sim_data, samp, bucket, choice) %>% head
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob=n/sum(n)) %>%head
left_join(val, lambda, by='bucket')
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
group_by(prob, bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
prob<-left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
group_by(prob, bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda))
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
)
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
) %>%
mutate(
prob=val*group.val,
prob=prob/sum(prob)
)
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
) %>%
mutate(
prob=val*group.val,
prob=prob/sum(prob)
) %>%
select(bucket, choice, prob) %>%
arrange(bucket, choice) ->x
x %>% summarise(sum(prob))
h(x)
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>% head
theoretical_probabilities<-function(val, lambda){
left_join(val, lambda, by='bucket') %>%
mutate(val=exp(val/lambda)) %>%
left_join(
.,
group_by(., bucket) %>%
summarise(group.val=sum(val)^(unique(lambda)-1))
) %>%
mutate(
prob=val*group.val,
prob=prob/sum(prob)
) %>%
select(bucket, choice, prob) %>%
arrange(bucket, choice)
}
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>% head
ests <-
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>%
mutate(delta = sim.prob-prob) %>%
select(-c(sim.prob, prob)) %>%
dcast(samp ~ bucket + choice, value.var = 'delta', fill = 0)
ests
count(sim_data, samp, bucket, choice) %>%
group_by(samp) %>%
mutate(sim.prob = n/sum(n)) %>%
select(-n) %>%
left_join(
theoretical_probabilities(val, lambda),
by = c('bucket', 'choice')
) %>%
mutate(delta = sim.prob-prob) %>%
select(-c(sim.prob, prob)) %>%
dcast(samp ~ bucket + choice, value.var = 'delta', fill = 0) %>% {
x <-
filter(., samp == 1) %>%
select(-(1:2)) %>%
unlist
cov = select(., -(1:2)) %>%
cov()
x%*%solve(cov, x) %>%
pchisq(df = length(x)) %>%
sum(-1) %>%
prod(-1)
}
